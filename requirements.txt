pupose - what it does, target people, 
functional and nf requirements
file structure - languages used, what each file does - cs things 

1. Overview

BioTrackAI is a comprehensive health monitoring system designed to track and analyze key vital signs in the human body. By simulating real-time data from various wearable 
sensors, such as heart rate monitors, thermometers, blood pressure cuffs, pulse oximeters, and respiratory sensors, BioTrackAI allows users to continuously monitor their 
health metrics with ease. The system uses advanced algorithms to analyze the data, detecting any anomalies or potential health risks such as abnormal heart rates, low 
oxygen levels, high blood pressure, or respiratory issues. Whenever irregularities are detected, the system provides timely alerts, ensuring that users are informed and 
can take necessary actions.

The system features a user-friendly web dashboard that displays health data in an intuitive, easy-to-understand format, allowing users to visualize trends in their vital 
signs over time. It is ideal for individuals looking to actively manage their health, such as fitness enthusiasts and elderly people who may need constant monitoring. It 
empowers users to take proactive steps toward improving their health and well-being by providing easy access to important health insights in real time.

2. Functional Requirements

2.1 Data Simulation

    FR 1.1: The system shall simulate health data for the following vital signs:

       Heart Rate (HR): Simulated heart rate values will range from 40 to 180 bpm (beats per minute), representing normal, stressed, or irregular conditions.

       Body Temperature: Simulated temperature values will range from 34.0°C to 42.0°C, representing normal, fever, or hypothermic conditions.

       Blood Pressure (BP): Simulated systolic and diastolic values will range from 90/60 mmHg to 180/120 mmHg, including normal, high, and hypertensive conditions.

       Blood Oxygen Saturation (SpO₂): Simulated values will range from 85% to 100%, indicating normal oxygenation levels and hypoxia.

       Respiratory Rate (RR): Simulated respiratory rate will range from 10 to 30 breaths per minute, representing normal or stressed breathing patterns.

   FR 1.2: The data shall be generated every few seconds (e.g., every 2 seconds) to simulate real-time data collection.

   FR 1.3: The simulated data shall be formatted in JSON for easy transmission to the backend server. Example format:

   FR 1.4: The simulated data will be sent to a backend server via POST requests, emulating sensor readings from different devices. For instance:

       Heart Rate (HR) will be simulated from a smartwatch or fitness tracker.

       Body Temperature will be simulated from a digital thermometer.

       Blood Pressure will be simulated from a blood pressure cuff.

       Blood Oxygen Saturation (SpO₂) will be simulated from a pulse oximeter.

     Respiratory Rate (RR) will be simulated from a respiratory sensor.

2.2 Data Storage

   FR 2.1: The backend shall store incoming simulated health data in a database (e.g., SQLite or AWS RDS) for historical tracking.

   FR 2.2: Each health record should be associated with a timestamp to track the exact time the data was recorded.

   FR 2.3: The system shall allow querying of stored data based on time intervals (e.g., last 24 hours, last week) to visualize trends and detect anomalies.

2.3 Data Analysis and Anomaly Detection

   FR 3.1: The system shall perform basic anomaly detection on the incoming simulated health data:

       Heart Rate: Alert when heart rate is too high (above 100 bpm) or too low (below 50 bpm).

       Body Temperature: Alert when body temperature is above 38.5°C (fever) or below 35°C (hypothermia).

       Blood Pressure: Alert when systolic pressure exceeds 140 mmHg or diastolic exceeds 90 mmHg (high blood pressure).

       Blood Oxygen Saturation: Alert when SpO₂ falls below 90%, indicating possible hypoxia.

       Respiratory Rate: Alert when respiratory rate exceeds 25 breaths per minute (tachypnea) or falls below 12 breaths per minute (bradypnea).

   FR 3.2: The system shall continuously analyze incoming data to identify when any of the parameters exceed safe thresholds and generate an alert to notify the user.

   FR 3.3: Alerts shall be visualized in the real-time dashboard, allowing the user to monitor their health status live.

2.4 Web Dashboard

   FR 4.1: The system shall provide a real-time web dashboard for displaying health data and anomalies.

   FR 4.2: The dashboard shall present data as:

       Graphs for visualizing trends in heart rate, temperature, blood pressure, SpO₂, and respiratory rate over time.

       Text Alerts when health parameters exceed predefined thresholds (e.g., "High Heart Rate", "Low SpO₂").

   FR 4.3: The dashboard shall refresh every few seconds to display the most up-to-date health readings.

   FR 4.4: The dashboard shall be responsive and accessible via desktop and mobile browsers.

2.5 Cloud Deployment

   FR 5.1: The backend shall be deployed on AWS EC2 to ensure scalability and accessibility.

   FR 5.2: The system shall store historical data in AWS S3 or RDS for persistence and long-term storage.

   FR 5.3: The system shall use AWS Lambda (optional) to trigger periodic tasks such as:

       Retraining of ML models for more sophisticated anomaly detection.

       Regular backups of stored health data.


3. Non-Functional Requirements
   
   3.1: The system must be scalable to handle data from a large number of users simultaneously.

   3.2: The system must provide security for sensitive data, ensuring that all health data is stored and transmitted securely (e.g., using HTTPS and data encryption).

   3.3: The system must be fault-tolerant, ensuring minimal downtime and quick recovery in case of failures.


4. Assumptions

   The health data is simulated and does not represent real-world sensor readings.

   The system assumes a standard set of parameters for health conditions (e.g., heart rate, blood pressure thresholds).

   Real-world sensor data will be approximated in the simulation (e.g., fluctuating heart rate, body temperature spikes).

   The system will assume thw simulated health data is generated by devices such as smartwatches, pulse oximeters, blood pressure monitors, thermometers, and respiratory rate sensors.

4. Code Structure

Simulation: Using Python with random, time, and json to simulate real-time health data quickly.

Backend: Handles data processing, analysis, and API communication. Uses Flask for creating APIs and SQLite or AWS RDS for data storage.

Data Analysis: Scikit-learn, NumPy, and Pandas are used for processing health data and performing anomaly detection.

Frontend: Displays real-time data and trends to users. Uses React for dynamic UIs and Chart.js for real-time graphing

Hosting: Automates deployment to cloud environments. AWS EC2, S3, Lambda, and RDS used for hosting and storing data.

AI Assistant (optional): Can use LangChain + OpenAI GPT for an impressive conversational interface.


